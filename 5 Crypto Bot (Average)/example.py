closss =    [57418.12, 57464.69, 57429.9, 57450.68, 57458.73, 57491.37, 57472.51, 57400.0, 57408.38, 57499.12, 57545.69, 57626.89, 57576.71, 57523.78, 57521.97, 57567.53, 57495.07, 57460.66, 57470.21, 57512.06, 57465.47, 57483.39, 57475.68, 57494.32, 57441.68, 57385.37, 57371.51, 57483.53, 57452.11, 57470.89, 57472.86, 57513.0, 57513.73, 57506.53, 57480.01, 57496.17, 57483.38, 57400.0, 57379.99, 57283.49, 57300.65, 57237.24, 57211.39, 57218.55, 57281.62, 57367.21, 57401.49, 57441.16, 57369.91, 57324.27, 57326.63, 57297.35, 57400.26, 57370.01, 57390.0, 57431.88, 57481.32, 57481.12, 57496.65, 57498.07, 57455.89, 57493.26, 57498.99, 57530.0, 57439.39, 57486.28, 57514.66, 57544.26, 57499.43, 57506.12, 57453.7, 57455.29, 57481.41, 57428.57, 57394.99, 57419.24, 57402.42, 57421.88, 57419.64, 57476.53, 57521.32, 57480.94, 57442.89, 57364.8, 57361.43, 57351.57, 57277.26, 57247.65, 57220.0, 57211.74, 57173.02, 57159.36, 57183.03, 57150.69, 57133.22, 57183.36, 57216.94, 57271.66, 57367.3, 57370.01, 57309.98, 57415.94, 57342.25, 57387.05, 57330.0, 57305.9, 57237.68, 57215.88, 57160.99, 57125.84, 57096.01, 57154.22, 57175.19, 57153.55, 57155.66, 57218.55, 57237.57, 57248.07, 57239.44, 57295.0, 57284.09, 57307.51, 57342.86, 57279.57, 57266.97, 57351.75, 57451.03, 57483.43, 57530.6, 57540.98, 57591.86, 57633.5, 57586.95, 57590.71, 57639.96, 57642.91, 57609.85, 57811.93, 57806.27, 57860.18, 57853.89, 57791.58, 57754.65, 57778.01, 57745.47, 57730.02, 57685.01, 57682.82, 57663.49, 57740.35, 57685.45, 57688.21, 57635.4, 57671.49, 57636.87, 57604.99, 57623.42, 57673.22, 57628.6, 57608.74, 57615.63, 57645.06, 57719.37, 57812.82, 57871.05, 57842.74, 57904.78, 57847.16, 57786.95, 57772.13, 57798.34, 57763.99, 57754.31, 57788.68, 57778.28, 57757.09, 57764.69, 57770.71, 57768.47, 57761.68, 57769.6, 57848.72, 57846.47, 57824.79, 57844.18, 57919.66, 57857.97, 57886.23, 57873.47, 57905.99, 57860.0, 57911.75, 57887.17, 57872.49, 57842.09, 57858.44, 57918.21, 57873.09, 57955.41, 57969.46, 57933.11, 57912.14, 57856.14, 57881.66, 57864.99, 57850.65, 57830.57, 57800.01, 57832.18, 57874.7, 57839.25, 57868.7, 57857.44, 57861.42, 57826.73, 57833.98, 57814.47, 57918.28, 57926.16, 57932.52, 57971.16, 57998.43, 58070.54, 58071.52, 58016.75, 58026.75, 58026.75, 58000.0, 58088.71, 58017.61, 58057.08, 58107.84, 58097.77, 58098.32, 58061.26, 58061.46, 58040.37, 58040.28, 58050.24, 58050.25, 58020.01, 58035.0, 58030.09, 58030.19, 58025.89, 58137.53, 58133.39, 58099.98, 58071.84, 58096.43, 58083.93, 58050.84, 58030.0, 58002.06, 57974.61, 58064.08, 58050.0, 58055.29, 58066.14, 58071.89, 58110.32, 58094.37, 58065.36, 58116.35, 58187.29, 58155.61, 58102.95, 58100.0, 58104.97, 58095.0, 58088.97, 58125.17, 58153.21, 58075.55, 58120.0, 58177.45, 58176.17, 58148.91, 58130.58, 58124.95, 58141.0, 58095.31, 58070.0, 58050.15, 58038.89, 58070.13, 58109.34, 58112.66, 58012.2, 57942.13, 57975.41, 57964.91, 57937.95, 57981.54, 57987.15, 57994.6, 58091.82, 58131.39, 58113.38, 58094.82, 58046.55, 57991.87, 57901.39, 57880.35, 57930.32, 58008.86, 58037.19, 58026.7, 58103.94, 58098.82, 58114.5, 58149.52, 58127.98, 58104.18, 58116.62, 58117.31, 58131.33, 58115.64, 58110.0, 58031.61, 58076.71, 58029.3, 57980.01, 57970.22, 57963.44, 58040.81, 58045.59, 58054.14, 58070.0, 58119.7, 58154.79, 58180.57, 58239.2, 58289.98, 58239.28, 58380.23, 58380.01, 58417.79, 58352.48, 58276.64, 58295.27, 58313.95, 58334.24, 58335.32, 58332.75, 58340.14, 58341.18, 58331.46, 58301.25, 58287.59, 58237.65, 58196.99, 58194.63, 58156.75, 58136.67, 58125.41, 58177.43, 58169.99, 58180.2, 58152.43, 58143.06, 58180.19, 58187.9, 58225.32, 58240.84, 58327.6, 58335.11, 58272.97, 58221.43, 58183.08, 58153.25, 58110.44, 58095.14, 58096.64, 58112.77, 58184.62, 58106.84, 58106.98, 58103.53, 58138.26, 58117.36, 58074.75, 58049.69, 58037.06, 58095.48, 58071.81, 58105.19, 58102.08, 58104.27, 58255.65, 58229.21, 58183.38, 58130.75, 58108.9, 58133.89, 58142.12, 58167.95, 58162.33, 58194.62, 58220.78, 58202.48, 58231.03, 58263.66, 58317.26, 58403.67, 58416.1, 58479.0, 58428.32, 58474.33, 58520.05, 58541.27, 58588.02, 58634.27, 58713.91, 58732.21, 58679.16, 58711.18, 58711.18, 58700.07, 58700.0, 58742.65, 58765.09, 58800.0, 58850.0, 58858.6, 58902.78, 58909.61, 58963.94, 58880.65, 58783.09, 58880.29, 58829.5, 58780.45, 58756.94, 58728.24, 58742.54, 58702.61, 58675.61, 58767.01, 58775.54, 58736.83, 58727.66, 58730.03, 58771.85, 58732.23, 58726.11, 58678.29, 58678.18, 58737.82, 58688.21, 58688.96, 58706.36, 58672.98, 58698.37, 58683.03, 58690.71, 58656.07, 58665.55, 58629.98, 58630.04, 58613.65, 58631.05, 58640.48, 58625.06, 58622.97, 58646.62, 58650.01, 58659.02, 58662.11, 58638.01, 58662.72, 58705.01, 58776.99, 58881.85, 58903.27, 58885.39, 58924.82, 58884.7, 58817.57, 58818.62, 58820.43, 58770.39, 58743.55, 58732.94, 58700.21, 58850.51, 58806.13, 58840.07, 58849.78, 58838.24, 58839.84, 58862.26, 58867.26, 58874.24, 58849.88, 58807.84, 58760.97, 58767.25, 58721.85, 58701.94, 58735.66, 58689.89, 58660.53, 58690.26, 58719.68, 58664.22, 58680.57, 58682.99, 58681.12, 58679.72, 58720.05, 58682.94, 58670.58, 58676.18, 58681.96, 58703.33, 58690.0, 58683.03, 58689.89, 58687.32, 58715.48, 58682.14, 58701.3, 58737.64, 58750.0, 58819.33]

import websocket
import json
import numpy as np
import csv

print("\nProgram started >>>> \n")
cc = 'btcusd'
interval = '1m'

socket = f'wss://stream.binance.com:9443/ws/{cc}t@kline_{interval}'

investment, real_time_portfolio_value, closes = [], [], []
sell_pur_hist = []
portfolio = 0
a, b, c = [], [], []
stock_avg_price = 0
amount = 1000
core_trade_amount = amount*0.80
core_quantity = 0
trade_amount = amount*0.20
core_to_trade = True
indication_to_buy, indication_to_sell = False, False

investment, real_time_portfolio_value, closes, highs, lows = [], [], [], [], []
money_end = amount




def buy(allocated_money, price):
  global portfolio, money_end ,investment
  print(f"Buy ${allocated_money} at price {price}")
  quantity = allocated_money/price
  money_end -= quantity*price
  portfolio += quantity
  if investment == []:
    investment.append(allocated_money)
  else:
    investment.append(allocated_money)
    investment[-1] += investment[-2]

def sell(allocated_money, price):
  global money_end, portfolio ,investment
  print(f"Sell ${allocated_money} at price {price}")
  quantity = allocated_money / price
  money_end += allocated_money
  portfolio -= quantity
  investment.append(-allocated_money)
  investment[-1] += investment[-2]


def main():
	for c_price in closss:
		global portfolio, investment, closes, highs, lows, money_end, core_to_trade, core_quantity, real_time_portfolio_value
		global stock_avg_price, a, b, c, sell_pur_hist
		close = c_price
		closes.append(float(close))
		last_price = closes[-1]
		print(f'{len(closes)} Closes: {closes[-10:]}')
        
        # First Buy
		if len(closes) == 1:
			# buying_amt = (money_end*10)/100
			buying_amt = 100
			buy(buying_amt, closes[-1])
			sell_pur_hist.append(["Buy", buying_amt, closes[-1]])
			stock_avg_price = closes[-1]
			a.append(buying_amt/closes[-1]) # a = 5
			b.append(closes[-1])    # b = 360
			c.append(a[-1]*b[-1])    # c = 1800 = 5*360
			stock_avg_price = sum(c)/sum(a)
			print("a,b,c : ",a,b,c) ### a, b, c == 5stock at price 360 then total price 1800
			print('stock avg price',stock_avg_price)
		else:
			if stock_avg_price > closes[-1] or stock_avg_price == 0: # Buy
				# print(f"""
	   #  			stock_avg_price > close_price
	   #  			{stock_avg_price} > {closes[-1]}
	   #  			""")
				# buying_amt = (money_end*10)/100
				buying_amt = 100
				indication_to_buy = True
				buy(buying_amt, closes[-1])
				sell_pur_hist.append(["Buy", buying_amt, closes[-1]])
				a.append(buying_amt/closes[-1]) # number of stock buy
				b.append(closes[-1])
				c.append(a[-1]*b[-1])
				# if stock_avg_price == 0:
				# 	stock_avg_price = closes[-1]
				# else:
				stock_avg_price = sum(c)/sum(a)
				indication_to_buy = False
				indication_to_sell = False
			else:# stock_avg_price < closes[-1]: # Sell
				# print(f"""
	   #  			stock_avg_price < close_price
	   #  			{stock_avg_price} < {closes[-1]}
	   #  			""")
				indication_to_sell = True
				sell(sum(a)*stock_avg_price, closes[-1])  # sell half of the tottal stock
				sell_pur_hist.append(["Sell", sum(a)*stock_avg_price, closes[-1]])
				a,b,c = [],[],[]
				# sell half of the current stock quantity
				# a.append(-100/closes[-1])
				# b.append(closes[-1])
				# c.append(a[-1]*b[-1])  # it will autometically minus cuase of -a
				stock_avg_price = 0
				indication_to_sell = False
				indication_to_buy = False

		# print("*****************line-end*****************")
		# print("Sell Pur Hist", sell_pur_hist)
		# print("stock_avg_price : ", stock_avg_price)
		RT_portfolio_value = money_end + portfolio*closes[-1]
		# print("a : ",a)
		# print("b : ",b)
		# print("c : ",c)
		print("Avg : ",stock_avg_price)
		print("Portfolio : ",portfolio)
		print("Money End : ",money_end)
		print("Real Time Portfolio Value : ",RT_portfolio_value)
		print("*****************line-end*****************\n\n")

main()